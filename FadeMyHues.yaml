blueprint:
  # Basic Blueprint Information
  name: Advanced RGB Fade with Manual Override
  description: >-
    A comprehensive blueprint to smoothly transition lights through RGB colors and brightness, with detection for manual interruption. 
    This automation requires inputs for trigger, target, timing, and fade parameters.
  domain: automation # This defines what kind of Home Assistant construct this will generate

  # Define user inputs
  inputs:
    # Trigger Configuration
    trigger_light:
      name: "Trigger Light Entity"
      description: "Select the light entity that, when turned ON, will start this fade automation."
      selector:
        entity:
          domain: light
          capabilities:
            - "toggle"

    # Time Condition Configuration
    trigger_after_time:
      name: "Start Fade After Time"
      description: "The automation will only run if the trigger light activates AFTER this specified time."
      selector:
        time:
          default: "22:45:00"

    # Controlled Lights Configuration
    controlled_lights_target:
      name: "Controlled Lights for Fade"
      description: "Select one or more light entities that will perform the smooth RGB fade."
      selector:
        target:
          entity:
            domain: light

    # Fade Parameters
    fade_duration_minutes:
      name: "Total Fade Duration (minutes)"
      description: "The total time for the entire fade process."
      selector:
        number:
          min: 1
          max: 240
          step: 1
          unit_of_measurement: "minutes"
          default: 60

    fade_steps:
      name: "Number of Interpolation Steps"
      description: "Higher steps create smoother fade but require more processing."
      selector:
        number:
          min: 2
          max: 1000
          step: 1
          default: 360

    start_rgb_color:
      name: "Starting RGB Color"
      description: "The initial RGB color [R, G, B] for the fade."
      selector:
        color_rgb:
          default: [255, 50, 0]

    end_rgb_color:
      name: "Ending RGB Color"
      description: "The final RGB color [R, G, B] for the fade."
      selector:
        color_rgb:
          default: [0, 0, 0]

    start_brightness_pct:
      name: "Starting Brightness (%)"
      description: "The initial brightness percentage."
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
          mode: slider
          default: 50

  # Blueprint execution template
  template:
    {% set automation_entity_id = "rgb_fade_automation_" + (input.trigger_light.entity_id | replace(".", "_")) %}
    
    automation:
      - alias: "RGB Fade Automation: {{ input.trigger_light.entity_id | to_json }}}"
      description: >
        Automates a smooth RGB color fade with brightness control, starting on trigger, 
        respecting time conditions, and handling manual interventions.

      variables:
        _fade_duration: "{{ input.fade_duration_minutes | int }}"
        _steps: "{{ input.fade_steps | int }}"
        _start_rgb: "{{ input.start_rgb_color | default([255, 50, 0]) | to_json }}"
        _end_rgb: "{{ input.end_rgb_color | default([0, 0, 0]) | to_json }}"
        _start_brightness: "{{ input.start_brightness_pct | int }}"
        _step_interval: >
          {% if _steps > 0 and _fade_duration > 0 %}
            {{ (_fade_duration * 60 / _steps) | round(2) }} 
          {% else %}
            1.0
          {% endif %}

      trigger:
        - platform: state
          entity_id: "{{ input.trigger_light.entity_id }}"
          to: "on"

      condition:
        - condition: time
          after: "{{ input.trigger_after_time }}"

      action:
        # 1. Initial turn on of controlled lights
        - service: light.turn_on
          target:
            entity_id: "{{ input.controlled_lights_target.entity_id }}"
          data_template:
            rgb_color: "{{ _start_rgb | to_json }}"
            brightness_pct: "{{ _start_brightness }}"

        # 2. Main fade sequence
        - variables:
            current_step: 0

        - repeat:
            count: "{{ _steps }}"
            continue_condition: "{{ current_step < _steps }}”  # Continue until reaching the last step
            sequence:
              # Calculate new RGB and brightness values
              - variables:
                  p: "{{ current_step / (_steps - 1) if _steps > 1 else (current_step / current_step if current_step > 0 else 0) }}"
                  new_r: "{{ (_start_rgb[0] + (_end_rgb[0] - _start_rgb[0]) * p) | int }}"
                  new_g: "{{ (_start_rgb[1] + (_end_rgb[1] - _start_rgb[1]) * p) | int }}"
                  new_b: "{{ (_start_rgb[2] + (_end_rgb[2] - _start_rgb[2]) * p) | int }}"
                  new_brightness: "{{ _start_brightness * (1 - p) | int }}"

              # Check for manual override
              - if:
                  - condition: template
                    value_template: >
                      {% set any_light_off = false %}
                      {% for entity in input.controlled_lights_target.entity_id.split(',') %}
                        {% if states(entity) != 'on' %}
                          {% set any_light_off = true; continue %}
                        {% endif %}
                      {% endfor %}
                      {{ any_light_off }}
                then:
                  - stop

              # Apply new color and brightness to lights
              - service: light.turn_on
                target:
                  entity_id: "{{ input.controlled_lights_target.entity_id }}"
                data:
                  rgb_color:
                    - "{{ new_r }}"
                    - "{{ new_g }}"
                    - "{{ new_b }}"
                  brightness_pct: "{{ new_brightness }}”

              # Wait for the calculated interval
              - delay: "{{ _step_interval }}” seconds”

              # Increment the step counter for the next iteration
              - variables:
                  current_step: "{{ current_step + 1 }}"

        # 3. Final action: Turn off lights if still on at the end
        - if:
            - condition: template
              value_template: >
                {% set any_light_on = true %}
                {% for entity in input.controlled_lights_target.entity_id.split(',') %}
                  {% if states(entity) != 'on' %}
                    {% set any_light_on = false; continue %}
                  {% endif %}
                {% endfor %}
                {{ any_light_on }}
          then:
            - service: light.turn_off
              target:
                entity_id: "{{ input.controlled_lights_target.entity_id }}"
