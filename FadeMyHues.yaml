# This is the primary 'blueprint' definition block.
blueprint:
  name: "Advanced RGB Fade with Manual Override"
  description: "A comprehensive blueprint to smoothly transition lights through RGB colors and brightness, with detection for manual interruption."
  domain: automation # This defines what kind of Home Assistant construct this blueprint will generate.

  # All user-configurable inputs are defined under the 'input:' key (singular).
  input:
    trigger_light:
      name: "Trigger Light Entity"
      description: "Select the light entity that, when turned ON, will start this fade automation."
      selector:
        entity:
          domain: light
          capabilities:
            - toggle # Using expanded list syntax for robustness

    trigger_after_time:
      name: "Start Fade After Time"
      description: "The automation will only run if the trigger light activates AFTER this specified time."
      selector:
        time:
          default: "22:45:00"

    controlled_lights_target:
      name: "Controlled Lights for Fade"
      description: "Select one or more light entities that will perform the smooth RGB fade. These lights MUST support RGB color and brightness control."
      selector:
        target:
          entity:
            domain: light
            capabilities:
              - toggle
              - brightness
              - rgb_color

    fade_duration_minutes:
      name: "Total Fade Duration (minutes)"
      description: "The total time for the entire fade process, in minutes. Lights will dim completely off by the end."
      selector:
        number:
          min: 1
          max: 240
          step: 1
          unit_of_measurement: "minutes"
          default: 60

    fade_steps:
      name: "Number of Interpolation Steps"
      description: "Lower numbers can be choppy, higher numbers require more processing. Minimum 2 for proper interpolation."
      selector:
        number:
          min: 2
          max: 1000
          step: 1
          default: 360
          
    start_rgb_color:
      name: "Starting RGB Color"
      description: "The initial RGB color ([R, G, B]) applied at the very beginning of the fade, e.g., [255, 50, 0] for an amber hue."
      selector:
        color_rgb:
          default: [255, 50, 0] # Standard list default

    end_rgb_color:
      name: "Ending RGB Color"
      description: "The final RGB color ([R, G, B]) towards which the lights will fade, e.g., [0, 0, 100] for a deep blue."
      selector:
        color_rgb:
          default: [0, 0, 100]

    start_brightness_pct:
      name: "Starting Brightness (%)"
      description: "The initial brightness percentage. Brightness will smoothly decrease to 0% as the fade progresses."
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
          mode: slider
          default: 50

# This is the actual automation definition. It is a separate block,
# at the same root level as the 'blueprint:' block above.
alias: "Fade Automation: {{ input.trigger_light.entity_id }}" # Access inputs via 'input.'
description: "Manages a smooth RGB color and brightness fade, starting on trigger, respecting time, and handling manual overrides."

variables:
  _fade_duration: "{{ input.fade_duration_minutes }}"
  _steps: "{{ input.fade_steps }}"
  _start_rgb: "{{ input.start_rgb_color }}"
  _end_rgb: "{{ input.end_rgb_color }}"
  _start_brightness: "{{ input.start_brightness_pct }}"
  _step_seconds: "{{ (_fade_duration * 60.0 / _steps) | round(2) }}"

trigger:
  - platform: state
    entity_id: "{{ input.trigger_light.entity_id }}"
    to: "on"

condition:
  - condition: time
    after: "{{ input.trigger_after_time }}"

action:
  - service: light.turn_on
    target:
      entity_id: "{{ input.controlled_lights_target.entity_id }}"
    data:
      rgb_color: "{{ _start_rgb }}"
      brightness_pct: "{{ _start_brightness }}"

  - repeat:
      count: "{{ _steps }}"
      sequence:
        - variables:
            p: "{{ (repeat.index * 1.0) / (_steps - 1 if _steps > 1 else 1) }}"
            new_r: "{{ ((_start_rgb[0] - (_start_rgb[0] - _end_rgb[0]) * p) | round(0) | int) }}"
            new_g: "{{ ((_start_rgb[1] - (_start_rgb[1] - _end_rgb[1]) * p) | round(0) | int) }}"
            new_b: "{{ ((_start_rgb[2] - (_start_rgb[2] - _end_rgb[2]) * p) | round(0) | int) }}"
            new_brightness: "{{ (_start_brightness * (1 - p)) | round(0) | int }}"
        - service: light.turn_on
          target:
            entity_id: "{{ input.controlled_lights_target.entity_id }}"
          data:
            rgb_color:
              - "{{ new_r }}"
              - "{{ new_g }}"
              - "{{ new_b }}"
            brightness_pct: "{{ new_brightness }}"
        - delay:
            milliseconds: "{{ (_step_seconds * 1000) | int(0) }}"
        - if:
            - condition: template
              value_template: >
                {% set all_lights_still_on = true %}
                {% set controlled_entities = expand(input.controlled_lights_target.entity_id) %}
                {% for entity in controlled_entities %}
                  {% if states(entity.entity_id) != 'on' %}
                    {% set all_lights_still_on = false %}
                    {% break %}
                  {% endif %}
                {% endfor %}
                {{ not all_lights_still_on }}
          then:
            - stop: "Manual override detected: controlled lights state changed."

  - if:
      - condition: template
        value_template: >
          {% set all_lights_are_on_at_end = true %}
          {% set controlled_entities = expand(input.controlled_lights_target.entity_id) %}
          {% for entity in controlled_entities %}
            {% if states(entity.entity_id) != 'on' %}
              {% set all_lights_are_on_at_end = false %}
              {% break %}
            {% endif %}
          {% endfor %}
          {{ all_lights_are_on_at_end }}
    then:
      - service: light.turn_off
        target:
          entity_id: "{{ input.controlled_lights_target.entity_id }}"
