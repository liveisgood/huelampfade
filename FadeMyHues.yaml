blueprint:
  # Basic Blueprint Information (these are direct children of 'blueprint')
  name: Advanced RGB Fade with Manual Override
  description: >-
    Blueprint to create an automation that smoothly transitions lights through RGB colors and brightness.
    Requires setting specific parameters for trigger, target, timing, and fade effects.
  domain: automation

  # Configure Inputs (this is 'input:' singular, also a direct child of 'blueprint')
  input: # <--- CORRECTED: This must be 'input' (singular) as a direct child of 'blueprint'
    trigger_light:
      name: "Trigger Light"
      description: "The light entity that, when turned ON, will start this fade."
      selector:
        entity:
          domain: light
          capabilities: ['toggle'] 

    trigger_after_time:
      name: "Only Trigger After Time"
      description: "Automation will only run if the trigger light turns on AFTER this time."
      selector:
        time:
          default: "22:45:00"

    controlled_lights_target:
      name: "Lights to Control"
      description: "Select one or more light entities that will perform the fade."
      selector:
        target:
          entity:
            domain: light
            capabilities: ['toggle', 'brightness', 'rgb_color'] 

    fade_duration_minutes:
      name: "Fade Duration (minutes)"
      description: "How long the entire fade process should take, in minutes."
      selector:
        number:
          min: 1
          max: 240
          step: 1
          unit_of_measurement: "minutes"
          default: 60

    fade_steps:
      name: "Number of Fade Steps"
      description: "Higher steps create smoother fade but require more processing. Minimum 2 for interpolation."
      selector:
        number:
          min: 2 
          max: 1000
          step: 1
          default: 360

    start_rgb_color:
      name: "Start RGB Color"
      description: "The initial RGB color for the fade (e.g. [255, 50, 0] for amber)"
      selector:
        color_rgb:
          default: [255, 50, 0]

    end_rgb_color:
      name: "End RGB Color"
      description: "The final RGB color for the fade (e.g. [0, 0, 100] for blue)"
      selector:
        color_rgb:
          default: [0, 0, 100]

    start_brightness_pct:
      name: "Start Brightness (%)"
      description: "Initial brightness percentage (will decrease to 0%)."
      selector:
        number:
          min: 0
          max: 100
          step:  1
          unit_of_measurement: "%"
          mode: slider
          default: 50

  # The automation definition itself (alias, description, variables, trigger, condition, action)
  # MUST be direct children of the 'blueprint:' key, alongside 'name', 'description', 'domain', and 'input'.
  alias: RGB Fade Automation - {{ input.trigger_light.entity_id }} # Uses 'input'
  description: "Automatically fades lights between specified RGB colors and dims to off."

  variables:
    _fade_duration: "{{ input.fade_duration_minutes }}" # Uses 'input'
    _steps: "{{ input.fade_steps }}" # Uses 'input'
    _start_rgb: "{{ input.start_rgb_color }}" # Uses 'input'
    _end_rgb: "{{ input.end_rgb_color }}" # Uses 'input'
    _start_brightness: "{{ input.start_brightness_pct }}" # Uses 'input'
    _step_seconds: "{{ (_fade_duration * 60.0 / _steps) | round(2) }}"

  trigger:
    - platform: state
      entity_id: "{{ input.trigger_light.entity_id }}" # Uses 'input'
      to: "on"

  condition:
    - condition: time
      after: "{{ input.trigger_after_time }}" # Uses 'input'

  action:
    # 1. Initial turn on of the controlled lights
    - service: light.turn_on
      target:
        entity_id: "{{ input.controlled_lights_target.entity_id }}" # Uses 'input'
      data:
        rgb_color: "{{ _start_rgb }}" 
        brightness_pct: "{{ _start_brightness }}"

    # 2. Main fade sequence
    - repeat:
        count: "{{ _steps }}" 
        sequence:
          - variables:
              p: "{{ (repeat.index * 1.0) / (_steps - 1 if _steps > 1 else 1) }}"
              new_r: "{{ ((_start_rgb[0] - (_start_rgb[0] - _end_rgb[0]) * p) | round(0) | int) }}"
              new_g: "{{ ((_start_rgb[1] - (_start_rgb[1] - _end_rgb[1]) * p) | round(0) | int) }}"
              new_b: "{{ ((_start_rgb[2] - (_start_rgb[2] - _end_rgb[2]) * p) | round(0) | int) }}"
              new_brightness: "{{ (_start_brightness * (1 - p)) | round(0) | int }}"

          - service: light.turn_on
            target:
              entity_id: "{{ input.controlled_lights_target.entity_id }}" # Uses 'input'
            data:
              rgb_color:
                - "{{ new_r }}"
                - "{{ new_g }}"
                - "{{ new_b }}"
              brightness_pct: "{{ new_brightness }}"

          - delay:
              milliseconds: "{{ (_step_seconds * 1000) | int(0) }}"

          - if:
              - condition: template
                value_template: >
                  {% set all_lights_on = true %}
                  {% set controlled_entities = expand(input.controlled_lights_target.entity_id) %} {# Uses 'input' #}
                  {% for entity in controlled_entities %}
                    {% if states(entity.entity_id) != 'on' %}
                      {% set all_lights_on = false %}
                      {% break %}
                    {% endif %}
                  {% endfor %}
                  {{ not all_lights_on }}
            then:
              - stop: "Manual override detected: one or more controlled lights were turned off."
          
    # 3. Final action: Turn off lights if still on (after fade completes)
    - if:
        - condition: template
          value_template: >
            {% set all_lights_on = true %}
            {% set controlled_entities = expand(input.controlled_lights_target.entity_id) %} {# Uses 'input' #}
            {% for entity in controlled_entities %}
              {% if states(entity.entity_id) != 'on' %}
                {% set all_lights_on = false %}
                {% break %}
              {% endif %}
            {% endfor %}
            {{ all_lights_on }}
      then:
        - service: light.turn_off
          target:
            entity_id: "{{ input.controlled_lights_target.entity_id }}" # Uses 'input'

