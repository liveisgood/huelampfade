blueprint:
  name: Advanced Fading Light Automation
  description: Fades selected lights from a start color and brightness to an end color and 0 brightness over a specified duration, triggered by a light turning on AND a specific time. Allows manual override.
  domain: automation
  input:
    # --- Triggers ---
    trigger_light_entity:
      name: Trigger Light
      description: The specific light that needs to be turned ON to activate the automation.
      selector:
        entity:
          domain: light

    trigger_time:
      name: Trigger Time
      description: The specific time that needs to be met (e.g., 22:00:00) to activate the automation.
      selector:
        time:

    # --- Target Lights ---
    target_lights:
      name: Target Lights
      description: Select one or more lights to apply the fading effect to.
      selector:
        entity:
          domain: light
          multiple: true

    # --- Fade Duration ---
    fade_duration:
      name: Fade Duration
      description: How long should the fade take (in minutes)?
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes
          mode: slider

    # --- Colors ---
    start_color:
      name: Start Color
      description: The initial color for the fade.
      selector:
        color_rgb:
          label: Start RGB
          default: [255, 128, 0] # Default to Dark Orange (closer to R:255, G:128, B:0)

    end_color:
      name: End Color
      description: The final color for the fade.
      selector:
        color_rgb:
          label: End RGB
          default: [255, 0, 0] # Default to red

    # --- Brightness ---
    start_brightness:
      name: Start Brightness
      description: The initial brightness for the fade (percentage).
      default: 100
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider

variables:
  # Convert fade_duration from minutes to seconds
  fade_duration_seconds: "{{ (fade_duration | float) * 60 }}"
  # Calculate step duration for brightness and color changes (e.g., update every 1 second)
  step_duration_seconds: 1
  # Calculate total number of steps
  total_steps: "{{ (fade_duration_seconds / step_duration_seconds) | int(1) }}"

  # Convert percentage brightness to 0-255 scale
  start_brightness_255: "{{ (start_brightness | float / 100 * 255) | int }}"
  # Calculate brightness decrement per step (using 0-255 scale)
  brightness_decrement_per_step: "{{ (start_brightness_255 | float) / total_steps }}"

  # Extract RGB components for easier calculation
  start_r: "{{ start_color[0] | float }}"
  start_g: "{{ start_color[1] | float }}"
  start_b: "{{ start_color[2] | float }}"

  end_r: "{{ end_color[0] | float }}"
  end_g: "{{ end_color[1] | float }}"
  end_b: "{{ end_color[2] | float }}"

trigger:
  # Trigger 1: Specific light is turned ON
  - platform: state
    entity_id: !input trigger_light_entity
    from: "off"
    to: "on"
    id: "trigger_light_on" # Unique ID for this trigger

  # Trigger 2: Specific time is met
  - platform: time
    at: !input trigger_time
    id: "trigger_time_met" # Unique ID for this trigger

condition:
  # Ensure BOTH triggers have occurred recently (within a short timeframe)
  - condition: and
    conditions:
      - condition: trigger
        id: "trigger_light_on"
      - condition: trigger
        id: "trigger_time_met"

action:
  # Action 1: Set initial state of target lights
  - service: light.turn_on
    target:
      entity_id: !input target_lights
    data:
      brightness: "{{ start_brightness_255 }}" # Use the 0-255 converted value
      rgb_color: "{{ start_color }}"
      transition: 0 # Instant change to start state

  # Action 2: Loop for fading
  - repeat:
      count: "{{ total_steps }}"
      sequence:
        - variables:
            # Calculate current step number (1-based index for repeat loop)
            current_step: "{{ repeat.index }}"
            # Calculate current brightness (using 0-255 scale)
            current_brightness: "{{ ([0, start_brightness_255 - (brightness_decrement_per_step * current_step)] | max) | int }}" # Ensure brightness doesn't go below 0

            # Calculate current RGB values using linear interpolation
            current_r: "{{ (start_r + (end_r - start_r) * (current_step / total_steps)) | int }}"
            current_g: "{{ (start_g + (end_g - start_g) * (current_step / total_steps)) | int }}"
            current_b: "{{ (start_b + (end_b - start_b) * (current_step / total_steps)) | int }}"

        - service: light.turn_on
          target:
            entity_id: !input target_lights
          data:
            brightness: "{{ current_brightness }}"
            rgb_color: "{{ [current_r, current_g, current_b] }}"
            transition: "{{ step_duration_seconds }}" # Smooth transition to the next step

        # Action 3: Stop automation if any target light is turned off manually
        - wait_for_trigger:
            - platform: state
              entity_id: !input target_lights
              from: "on"
              to: "off"
          timeout: "{{ step_duration_seconds }}" # Wait for the duration of one step
          continue_on_timeout: true # If no light is turned off, continue to next step

        - if: "{{ wait.trigger.platform is defined }}" # If the wait_for_trigger actually triggered (meaning a light was turned off)
            then:
              - stop: "Manual override: Light(s) turned off during fade."
