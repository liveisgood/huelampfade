blueprint:
  # Basic Blueprint Information
  name: Advanced RGB Fade with Manual Override
  description: >-
    Blueprint to create an automation that smoothly transitions lights through RGB colors and brightness with manual override detection.
  domain: automation  # This defines what kind of Home Assistant construct this will generate

  # Define user inputs
  inputs:
    # Trigger Configuration
    trigger_light:
      name: "Trigger Light"
      description: "Select the light entity that, when turned ON, will start this fade automation."
      selector:
        entity:
          domain: light
          capabilities:
            - "toggle"

    # Time Condition Configuration
    trigger_after_time:
      name: "Start Fade After Time"
      description: "The automation will only run if the trigger light activates AFTER this specified time."
      selector:
        time:
          default: "22:45:00"

    # Controlled Lights Configuration
    controlled_lights_target:
      name: "Controlled Lights for Fade"
      description: "Select one or more light entities that will perform the smooth RGB fade."
      selector:
        target:
          entity:
            domain: light
            capabilities:
              - "toggle"
              - "brightness"
              - "rgb_color"

    # Fade Parameters
    fade_duration_minutes:
      name: "Total Fade Duration (minutes)"
      description: "The total time for the entire fade process. Lights will dim completely off by the end."
      selector:
        number:
          min: 1
          max: 240
          step: 1
          unit_of_measurement: "minutes"
          default: 60

    fade_steps:
      name: "Number of Interpolation Steps"
      description: "Higher numbers create smoother fade but require more processing. Minimum 2 for interpolation."
      selector:
        number:
          min: 2
          max: 1000
          step: 1
          default: 360

    start_rgb_color:
      name: "Starting RGB Color"
      description: "The initial RGB color [R, G, B] for the fade, e.g., [255, 50, 0] for amber."
      selector:
        color_rgb:
          default: [255, 50, 0]

    end_rgb_color:
      name: "Ending RGB Color"
      description: "The final RGB color [R, G, B] for the fade, e.g., [0, 0, 100] for deep blue."
      selector:
        color_rgb:
          default: [0, 0, 0]

    start_brightness_pct:
      name: "Starting Brightness (%)"
      description: "The initial brightness percentage. Brightness will smoothly decrease to 0%."
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: "%"
          mode: slider
          default: 50

  # Blueprint execution template
  template:
    alias: "RGB Fade Automation: {{ inputs.trigger_light }}"
    description: >
      Automatically fades lights from {{ inputs.start_rgb_color | to_color }} to 
      {{ inputs.end_rgb_color | to_color }} over {{ inputs.fade_duration_minutes }} minutes.

    variables:
      _fade_duration: "{{ inputs.fade_duration_minutes | int }}"
      _steps: "{{ inputs.fade_steps | int }}"
      _start_rgb: "{{ inputs.start_rgb_color | default([255, 50, 0]) }}"
      _end_rgb: "{{ inputs.end_rgb_color | default([0, 0, 0]) }}"
      _start_brightness: "{{ inputs.start_brightness_pct | int }}"
      _step_interval: "{{ (_fade_duration * 60 / _steps) }}"

    trigger:
      - platform: state
        entity_id: "{{ inputs.trigger_light.entity_id }}"
        to: "on"

    condition:
      - condition: time
        after: "{{ inputs.trigger_after_time }}"

    action:
      # 1. Initial turn on with start parameters
      - service: light.turn_on
        target:
          entity_id: "{{ inputs.controlled_lights_target.entity_id }}"
        data:
          rgb_color: "{{ _start_rgb }}"
          brightness_pct: "{{ _start_brightness }}"

      # 2. Main fade sequence
      - variables:
          current_step: 0

      - repeat:
          count: "{{ _steps }}"
          sequence:
            # Calculate new RGB and brightness values
            - variables:
                p: "{{ current_step / (_steps - 1) if _steps > 1 else (current_step / 1) }}"
                new_r: "{{ (_start_rgb[0] + (_end_rgb[0] - _start_rgb[0]) * p) | clamp(0, 255) | int }}"
                new_g: "{{ (_start_rgb[1] + (_end_rgb[1] - _start_rgb[1]) * p) | clamp(0, 255) | int }}"
                new_b: "{{ (_start_rgb[2] + (_end_rgb[2] - _start_rgb[2]) * p) | clamp(0, 255) | int }}"
                new_brightness: "{{ _start_brightness * (1 - p) | clamp(0, 100) | int }}"

            # Apply the new color and brightness to lights
            - service: light.turn_on
              target:
                entity_id: "{{ inputs.controlled_lights_target.entity_id }}"
              data:
                rgb_color:
                  - "{{ new_r }}"
                  - "{{ new_g }}"
                  - "{{ new_b }}"
                brightness_pct: "{{ new_brightness }}"

            # Check for manual override
            - if:
                - condition: template
                  value_template: >
                    {% set any_light_off = false %}
                    {% set entities = split(input.controlled_lights_target.entity_id, ',') %}
                    {% for entity in entities %}
                      {% if states(entity) != 'on' %}
                        {% set any_light_off = true; continue %}
                      {% endif %}
                    {% endfor %}
                    {{ any_light_off }}
              then:
                - stop: "Manual override detected"

            # Wait for the calculated interval
            - delay: "{{ _step_interval }}"

            # Increment the step counter
            - variables:
                current_step: "{{ current_step + 1 }}"

      # 3. Final action: Turn off lights if they were on at the beginning
      - if:
          - condition: template
            value_template: >
              {% set any_light_on = false %}
              {% set entities = split(input.controlled_lights_target.entity_id, ',') %}
              {% for entity in entities %}
                {% if states(entity) == 'on' %}
                  {% set any_light_on = true; break %}
                {% endif %}
              {% endfor %}
              {{ any_light_on }}
        then:
          - service: light.turn_off
            target:
              entity_id: "{{ inputs.controlled_lights_target.entity_id }}"

    mode: restart
